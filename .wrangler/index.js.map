{
  "version": 3,
  "sources": ["../worker/index.ts"],
  "sourceRoot": ".wrangler",
  "sourcesContent": ["interface Env {\n  ASSETS: Fetcher;\n  RESEND_API_KEY: string;\n  TURNSTILE_SECRET_KEY: string;\n}\n\ninterface ContactFormData {\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  message: string;\n  captchaToken: string;\n}\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type',\n};\n\nasync function handleContactSubmission(data: ContactFormData, env: Env): Promise<Response> {\n  if (!data.name || !data.email || !data.message) {\n    return new Response(\n      JSON.stringify({ success: false, error: 'Name, email, and message are required' }),\n      {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(data.email)) {\n    return new Response(\n      JSON.stringify({ success: false, error: 'Invalid email address' }),\n      {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (!data.captchaToken) {\n    return new Response(\n      JSON.stringify({ success: false, error: 'CAPTCHA verification required' }),\n      {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (!env.TURNSTILE_SECRET_KEY) {\n    console.error('TURNSTILE_SECRET_KEY not configured');\n    return new Response(\n      JSON.stringify({ success: false, error: 'Server configuration error' }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  const turnstileResponse = await fetch(\n    'https://challenges.cloudflare.com/turnstile/v0/siteverify',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        secret: env.TURNSTILE_SECRET_KEY,\n        response: data.captchaToken,\n      }),\n    }\n  );\n\n  const turnstileResult: any = await turnstileResponse.json();\n\n  if (!turnstileResult.success) {\n    console.error('Turnstile verification failed:', turnstileResult);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'CAPTCHA verification failed',\n        details: turnstileResult['error-codes'] || [],\n      }),\n      {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (!env.RESEND_API_KEY) {\n    console.error('RESEND_API_KEY not configured');\n    return new Response(\n      JSON.stringify({ success: false, error: 'Server configuration error' }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const emailResponse = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${env.RESEND_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: 'United Acquisitions Contact Form <noreply@notifications.unitedacq.com>',\n        to: ['info@unitedacq.com'],\n        subject: `New Contact Form Submission from ${data.name}`,\n        html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #2A5F9E; border-bottom: 2px solid #E5C93C; padding-bottom: 10px;\">\n            New Contact Form Submission\n          </h2>\n\n          <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #2A5F9E; margin-top: 0;\">Contact Information</h3>\n            <p><strong>Name:</strong> ${data.name}</p>\n            <p><strong>Email:</strong> <a href=\"mailto:${data.email}\">${data.email}</a></p>\n            ${data.phone ? `<p><strong>Phone:</strong> <a href=\"tel:${data.phone}\">${data.phone}</a></p>` : ''}\n            ${data.company ? `<p><strong>Company:</strong> ${data.company}</p>` : ''}\n          </div>\n\n          <div style=\"background-color: #fff; padding: 20px; border: 1px solid #ddd; border-radius: 8px;\">\n            <h3 style=\"color: #2A5F9E; margin-top: 0;\">Message</h3>\n            <p style=\"white-space: pre-wrap; line-height: 1.6;\">${data.message}</p>\n          </div>\n\n          <div style=\"margin-top: 20px; padding: 15px; background-color: #E6EBF2; border-radius: 8px; font-size: 12px; color: #666;\">\n            <p style=\"margin: 0;\"><strong>Submission Details:</strong></p>\n            <p style=\"margin: 5px 0 0 0;\">Time: ${new Date().toLocaleString()}</p>\n            <p style=\"margin: 5px 0 0 0;\">CAPTCHA Verified: \u2713</p>\n          </div>\n        </div>\n      `,\n        text: `\nNew Contact Form Submission\n\nName: ${data.name}\nEmail: ${data.email}\n${data.phone ? `Phone: ${data.phone}` : ''}\n${data.company ? `Company: ${data.company}` : ''}\n\nMessage:\n${data.message}\n\nSubmitted: ${new Date().toLocaleString()}\n      `,\n      }),\n    });\n\n    const emailResult = await emailResponse.json();\n\n    if (!emailResponse.ok) {\n      console.error('Resend API error:', emailResult);\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Failed to send email',\n        }),\n        {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    return new Response(\n      JSON.stringify({ success: true, data: emailResult }),\n      {\n        status: 200,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      }),\n      {\n        status: 500,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: corsHeaders,\n      });\n    }\n\n    if (url.pathname === '/api/contact' && request.method === 'POST') {\n      try {\n        const data: ContactFormData = await request.json();\n        return await handleContactSubmission(data, env);\n      } catch (error) {\n        console.error('Error processing contact form:', error);\n        return new Response(\n          JSON.stringify({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error occurred',\n          }),\n          {\n            status: 500,\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n          }\n        );\n      }\n    }\n\n    return env.ASSETS.fetch(request);\n  },\n};\n"],
  "mappings": "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",
  "names": []
}
